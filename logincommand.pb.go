// Code generated by protoc-gen-go.
// source: logincommand.proto
// DO NOT EDIT!

/*
Package Pmd is a generated protocol buffer package.

It is generated from these files:
	logincommand.proto

It has these top-level messages:
	Login
	AccountTokenVerifyLoginUserPmd_CS
	PushAccountVerifyLoginUserPmd_C
	AccountTokenVerifyReturnLoginUserPmd_S
	ZoneInfo
	ZoneInfoListLoginUserPmd_S
	RequestZoneInfoListLoginUserPmd_C
	RequestUserZoneInfoLoginUserPmd_C
	UserZoneInfo
	RequestUserZoneInfoLoginUserPmd_S
	UserLoginRequestLoginUserPmd_C
	UserLoginReturnFailLoginUserPmd_S
	UserLoginReturnOkLoginUserPmd_S
	UserLoginTokenLoginUserPmd_C
	ClientLogUrlLoginUserPmd_S
	MessageBoxLoginUserPmd_S
	RequestAccountRegisterLoginUserPmd_C
	ReturnAccountRegisterLoginUserPmd_S
	UserLogoutTokenLoginUserPmd_C
	UserLoginReconnectLoginUserPmd_C
	ReconnectKickoutLoginUserPmd_S
	ReconnectErrorLoginUserPmd_S
	ServerKickoutLoginUserPmd_S
	PlatInfo
	ThirdPlatLoginUserPmd_C
	SetServerLangLoginUserPmd_C
	RequestClientIPLoginUserPmd_C
	ReturnClientIPLoginUserPmd_S
	CheckVersionLoginUserPmd_C
	BehaviorClientVerifyLoginUserPmd_C
*/
package main

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"
import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type VerifyReturnReason int32

const (
	VerifyReturnReason_LoginOk        VerifyReturnReason = 0
	VerifyReturnReason_TokenFindError VerifyReturnReason = 1
	VerifyReturnReason_TokenDiffError VerifyReturnReason = 2
	VerifyReturnReason_VersionError   VerifyReturnReason = 3
)

var VerifyReturnReason_name = map[int32]string{
	0: "LoginOk",
	1: "TokenFindError",
	2: "TokenDiffError",
	3: "VersionError",
}
var VerifyReturnReason_value = map[string]int32{
	"LoginOk":        0,
	"TokenFindError": 1,
	"TokenDiffError": 2,
	"VersionError":   3,
}

func (x VerifyReturnReason) Enum() *VerifyReturnReason {
	p := new(VerifyReturnReason)
	*p = x
	return p
}
func (x VerifyReturnReason) String() string {
	return proto.EnumName(VerifyReturnReason_name, int32(x))
}
func (x *VerifyReturnReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VerifyReturnReason_value, data, "VerifyReturnReason")
	if err != nil {
		return err
	}
	*x = VerifyReturnReason(value)
	return nil
}

// 区服务器状态
type ZoneState int32

const (
	ZoneState_Shutdown ZoneState = 0
	ZoneState_Normal   ZoneState = 1
	ZoneState_Fullly   ZoneState = 2
	ZoneState_Starting ZoneState = 3
)

var ZoneState_name = map[int32]string{
	0: "Shutdown",
	1: "Normal",
	2: "Fullly",
	3: "Starting",
}
var ZoneState_value = map[string]int32{
	"Shutdown": 0,
	"Normal":   1,
	"Fullly":   2,
	"Starting": 3,
}

func (x ZoneState) Enum() *ZoneState {
	p := new(ZoneState)
	*p = x
	return p
}
func (x ZoneState) String() string {
	return proto.EnumName(ZoneState_name, int32(x))
}
func (x *ZoneState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZoneState_value, data, "ZoneState")
	if err != nil {
		return err
	}
	*x = ZoneState(value)
	return nil
}

type LoginReturnFailReason int32

const (
	LoginReturnFailReason_Password         LoginReturnFailReason = 1
	LoginReturnFailReason_ServerShutdown   LoginReturnFailReason = 2
	LoginReturnFailReason_VersionTooLow    LoginReturnFailReason = 3
	LoginReturnFailReason_UserTokenFind    LoginReturnFailReason = 4
	LoginReturnFailReason_UserTokenTempId  LoginReturnFailReason = 5
	LoginReturnFailReason_UserTokenTimeOut LoginReturnFailReason = 6
	LoginReturnFailReason_LoginDulicate    LoginReturnFailReason = 7
	LoginReturnFailReason_NoGatewaytDown   LoginReturnFailReason = 8
	LoginReturnFailReason_AccountUsing     LoginReturnFailReason = 9
)

var LoginReturnFailReason_name = map[int32]string{
	1: "Password",
	2: "ServerShutdown",
	3: "VersionTooLow",
	4: "UserTokenFind",
	5: "UserTokenTempId",
	6: "UserTokenTimeOut",
	7: "LoginDulicate",
	8: "NoGatewaytDown",
	9: "AccountUsing",
}
var LoginReturnFailReason_value = map[string]int32{
	"Password":         1,
	"ServerShutdown":   2,
	"VersionTooLow":    3,
	"UserTokenFind":    4,
	"UserTokenTempId":  5,
	"UserTokenTimeOut": 6,
	"LoginDulicate":    7,
	"NoGatewaytDown":   8,
	"AccountUsing":     9,
}

func (x LoginReturnFailReason) Enum() *LoginReturnFailReason {
	p := new(LoginReturnFailReason)
	*p = x
	return p
}
func (x LoginReturnFailReason) String() string {
	return proto.EnumName(LoginReturnFailReason_name, int32(x))
}
func (x *LoginReturnFailReason) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LoginReturnFailReason_value, data, "LoginReturnFailReason")
	if err != nil {
		return err
	}
	*x = LoginReturnFailReason(value)
	return nil
}

// 平台枚举
type PlatType int32

const (
	PlatType_PlatType_Normal     PlatType = 0
	PlatType_PlatType_UC         PlatType = 4
	PlatType_PlatType_LeZhuan    PlatType = 67
	PlatType_PlatType_WeChat     PlatType = 68
	PlatType_PlatType_Play68     PlatType = 69
	PlatType_PlatType_AiBei      PlatType = 70
	PlatType_PlatType_Facebook   PlatType = 71
	PlatType_PlatType_GooglePlay PlatType = 72
	PlatType_PlatType_XingZhiZhu PlatType = 73
	PlatType_PlatType_HuoWu      PlatType = 74
	PlatType_PlatType_CaiGuo     PlatType = 77
	PlatType_PlatType_1758       PlatType = 79
	PlatType_PlatType_DAPAI      PlatType = 80
	PlatType_PlatType_HILE       PlatType = 82
	PlatType_PlatType_AAY        PlatType = 86
	PlatType_PlatType_WEIYOU     PlatType = 90
	PlatType_PlatType_9g         PlatType = 99
	PlatType_PlatType_XueChi     PlatType = 133
	PlatType_PlatType_Egret      PlatType = 134
	PlatType_PlatType_AoXin      PlatType = 140
)

var PlatType_name = map[int32]string{
	0:   "PlatType_Normal",
	4:   "PlatType_UC",
	67:  "PlatType_LeZhuan",
	68:  "PlatType_WeChat",
	69:  "PlatType_Play68",
	70:  "PlatType_AiBei",
	71:  "PlatType_Facebook",
	72:  "PlatType_GooglePlay",
	73:  "PlatType_XingZhiZhu",
	74:  "PlatType_HuoWu",
	77:  "PlatType_CaiGuo",
	79:  "PlatType_1758",
	80:  "PlatType_DAPAI",
	82:  "PlatType_HILE",
	86:  "PlatType_AAY",
	90:  "PlatType_WEIYOU",
	99:  "PlatType_9g",
	133: "PlatType_XueChi",
	134: "PlatType_Egret",
	140: "PlatType_AoXin",
}
var PlatType_value = map[string]int32{
	"PlatType_Normal":     0,
	"PlatType_UC":         4,
	"PlatType_LeZhuan":    67,
	"PlatType_WeChat":     68,
	"PlatType_Play68":     69,
	"PlatType_AiBei":      70,
	"PlatType_Facebook":   71,
	"PlatType_GooglePlay": 72,
	"PlatType_XingZhiZhu": 73,
	"PlatType_HuoWu":      74,
	"PlatType_CaiGuo":     77,
	"PlatType_1758":       79,
	"PlatType_DAPAI":      80,
	"PlatType_HILE":       82,
	"PlatType_AAY":        86,
	"PlatType_WEIYOU":     90,
	"PlatType_9g":         99,
	"PlatType_XueChi":     133,
	"PlatType_Egret":      134,
	"PlatType_AoXin":      140,
}

func (x PlatType) Enum() *PlatType {
	p := new(PlatType)
	*p = x
	return p
}
func (x PlatType) String() string {
	return proto.EnumName(PlatType_name, int32(x))
}
func (x *PlatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PlatType_value, data, "PlatType")
	if err != nil {
		return err
	}
	*x = PlatType(value)
	return nil
}

type Login_Param int32

const (
	Login_AccountTokenVerifyLoginUserPmd_CS      Login_Param = 1
	Login_AccountTokenVerifyReturnLoginUserPmd_S Login_Param = 2
	Login_ZoneInfoListLoginUserPmd_S             Login_Param = 3
	Login_UserLoginRequestLoginUserPmd_C         Login_Param = 4
	Login_UserLoginReturnFailLoginUserPmd_S      Login_Param = 5
	Login_UserLoginReturnOkLoginUserPmd_S        Login_Param = 6
	Login_UserLoginTokenLoginUserPmd_C           Login_Param = 7
	Login_ClientLogUrlLoginUserPmd_S             Login_Param = 8
	Login_MessageBoxLoginUserPmd_S               Login_Param = 9
	Login_RequestAccountRegisterLoginUserPmd_C   Login_Param = 10
	Login_ReturnAccountRegisterLoginUserPmd_S    Login_Param = 11
	Login_UserLogoutTokenLoginUserPmd_C          Login_Param = 12
	Login_UserLoginReconnectLoginUserPmd_C       Login_Param = 13
	Login_ReconnectKickoutLoginUserPmd_S         Login_Param = 14
	Login_ServerKickoutLoginUserPmd_S            Login_Param = 15
	Login_RequestZoneInfoListLoginUserPmd_C      Login_Param = 16
	Login_SetServerLangLoginUserPmd_C            Login_Param = 17
	Login_RequestClientIPLoginUserPmd_C          Login_Param = 18
	Login_ReturnClientIPLoginUserPmd_S           Login_Param = 19
	Login_ReconnectErrorLoginUserPmd_S           Login_Param = 20
	Login_CheckVersionLoginUserPmd_C             Login_Param = 21
	Login_PushAccountVerifyLoginUserPmd_C        Login_Param = 22
	Login_BehaviorClientVerifyLoginUserPmd_C     Login_Param = 23
	Login_RequestUserZoneInfoLoginUserPmd_C      Login_Param = 24
	Login_RequestUserZoneInfoLoginUserPmd_S      Login_Param = 25
)

var Login_Param_name = map[int32]string{
	1:  "AccountTokenVerifyLoginUserPmd_CS",
	2:  "AccountTokenVerifyReturnLoginUserPmd_S",
	3:  "ZoneInfoListLoginUserPmd_S",
	4:  "UserLoginRequestLoginUserPmd_C",
	5:  "UserLoginReturnFailLoginUserPmd_S",
	6:  "UserLoginReturnOkLoginUserPmd_S",
	7:  "UserLoginTokenLoginUserPmd_C",
	8:  "ClientLogUrlLoginUserPmd_S",
	9:  "MessageBoxLoginUserPmd_S",
	10: "RequestAccountRegisterLoginUserPmd_C",
	11: "ReturnAccountRegisterLoginUserPmd_S",
	12: "UserLogoutTokenLoginUserPmd_C",
	13: "UserLoginReconnectLoginUserPmd_C",
	14: "ReconnectKickoutLoginUserPmd_S",
	15: "ServerKickoutLoginUserPmd_S",
	16: "RequestZoneInfoListLoginUserPmd_C",
	17: "SetServerLangLoginUserPmd_C",
	18: "RequestClientIPLoginUserPmd_C",
	19: "ReturnClientIPLoginUserPmd_S",
	20: "ReconnectErrorLoginUserPmd_S",
	21: "CheckVersionLoginUserPmd_C",
	22: "PushAccountVerifyLoginUserPmd_C",
	23: "BehaviorClientVerifyLoginUserPmd_C",
	24: "RequestUserZoneInfoLoginUserPmd_C",
	25: "RequestUserZoneInfoLoginUserPmd_S",
}
var Login_Param_value = map[string]int32{
	"AccountTokenVerifyLoginUserPmd_CS":      1,
	"AccountTokenVerifyReturnLoginUserPmd_S": 2,
	"ZoneInfoListLoginUserPmd_S":             3,
	"UserLoginRequestLoginUserPmd_C":         4,
	"UserLoginReturnFailLoginUserPmd_S":      5,
	"UserLoginReturnOkLoginUserPmd_S":        6,
	"UserLoginTokenLoginUserPmd_C":           7,
	"ClientLogUrlLoginUserPmd_S":             8,
	"MessageBoxLoginUserPmd_S":               9,
	"RequestAccountRegisterLoginUserPmd_C":   10,
	"ReturnAccountRegisterLoginUserPmd_S":    11,
	"UserLogoutTokenLoginUserPmd_C":          12,
	"UserLoginReconnectLoginUserPmd_C":       13,
	"ReconnectKickoutLoginUserPmd_S":         14,
	"ServerKickoutLoginUserPmd_S":            15,
	"RequestZoneInfoListLoginUserPmd_C":      16,
	"SetServerLangLoginUserPmd_C":            17,
	"RequestClientIPLoginUserPmd_C":          18,
	"ReturnClientIPLoginUserPmd_S":           19,
	"ReconnectErrorLoginUserPmd_S":           20,
	"CheckVersionLoginUserPmd_C":             21,
	"PushAccountVerifyLoginUserPmd_C":        22,
	"BehaviorClientVerifyLoginUserPmd_C":     23,
	"RequestUserZoneInfoLoginUserPmd_C":      24,
	"RequestUserZoneInfoLoginUserPmd_S":      25,
}

func (x Login_Param) Enum() *Login_Param {
	p := new(Login_Param)
	*p = x
	return p
}
func (x Login_Param) String() string {
	return proto.EnumName(Login_Param_name, int32(x))
}
func (x *Login_Param) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Login_Param_value, data, "Login_Param")
	if err != nil {
		return err
	}
	*x = Login_Param(value)
	return nil
}

type Login struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Login) Reset()         { *m = Login{} }
func (m *Login) String() string { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()    {}

// 客户端发给登陆服务器的登陆验证消息
type AccountTokenVerifyLoginUserPmd_CS struct {
	Account          *string `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	Token            *string `protobuf:"bytes,2,req,name=token" json:"token,omitempty"`
	Version          *uint32 `protobuf:"varint,3,req,name=version" json:"version,omitempty"`
	Gameid           *uint32 `protobuf:"varint,4,opt,name=gameid" json:"gameid,omitempty"`
	Mid              *string `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
	Platid           *uint32 `protobuf:"varint,6,opt,name=platid" json:"platid,omitempty"`
	Zoneid           *uint32 `protobuf:"varint,7,opt,name=zoneid" json:"zoneid,omitempty"`
	Gameversion      *uint32 `protobuf:"varint,8,opt,name=gameversion" json:"gameversion,omitempty"`
	Compress         *string `protobuf:"bytes,9,opt,name=compress" json:"compress,omitempty"`
	Encrypt          *string `protobuf:"bytes,10,opt,name=encrypt" json:"encrypt,omitempty"`
	Encryptkey       *string `protobuf:"bytes,11,opt,name=encryptkey" json:"encryptkey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AccountTokenVerifyLoginUserPmd_CS) Reset()         { *m = AccountTokenVerifyLoginUserPmd_CS{} }
func (m *AccountTokenVerifyLoginUserPmd_CS) String() string { return proto.CompactTextString(m) }
func (*AccountTokenVerifyLoginUserPmd_CS) ProtoMessage()    {}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetMid() string {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return ""
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetPlatid() uint32 {
	if m != nil && m.Platid != nil {
		return *m.Platid
	}
	return 0
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetGameversion() uint32 {
	if m != nil && m.Gameversion != nil {
		return *m.Gameversion
	}
	return 0
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetCompress() string {
	if m != nil && m.Compress != nil {
		return *m.Compress
	}
	return ""
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetEncrypt() string {
	if m != nil && m.Encrypt != nil {
		return *m.Encrypt
	}
	return ""
}

func (m *AccountTokenVerifyLoginUserPmd_CS) GetEncryptkey() string {
	if m != nil && m.Encryptkey != nil {
		return *m.Encryptkey
	}
	return ""
}

// 推送客户端连接上来的认证信息,简单验证,主要用来分配网关
type PushAccountVerifyLoginUserPmd_C struct {
	Accid            *uint64 `protobuf:"varint,1,opt,name=accid" json:"accid,omitempty"`
	Account          *string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Zoneid           *uint32 `protobuf:"varint,3,opt,name=zoneid" json:"zoneid,omitempty"`
	Token            *string `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`
	Version          *uint32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	Mid              *string `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Gameversion      *uint32 `protobuf:"varint,7,opt,name=gameversion" json:"gameversion,omitempty"`
	Compress         *string `protobuf:"bytes,8,opt,name=compress" json:"compress,omitempty"`
	Encrypt          *string `protobuf:"bytes,9,opt,name=encrypt" json:"encrypt,omitempty"`
	Encryptkey       *string `protobuf:"bytes,10,opt,name=encryptkey" json:"encryptkey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PushAccountVerifyLoginUserPmd_C) Reset()         { *m = PushAccountVerifyLoginUserPmd_C{} }
func (m *PushAccountVerifyLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*PushAccountVerifyLoginUserPmd_C) ProtoMessage()    {}

func (m *PushAccountVerifyLoginUserPmd_C) GetAccid() uint64 {
	if m != nil && m.Accid != nil {
		return *m.Accid
	}
	return 0
}

func (m *PushAccountVerifyLoginUserPmd_C) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PushAccountVerifyLoginUserPmd_C) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *PushAccountVerifyLoginUserPmd_C) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *PushAccountVerifyLoginUserPmd_C) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *PushAccountVerifyLoginUserPmd_C) GetMid() string {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return ""
}

func (m *PushAccountVerifyLoginUserPmd_C) GetGameversion() uint32 {
	if m != nil && m.Gameversion != nil {
		return *m.Gameversion
	}
	return 0
}

func (m *PushAccountVerifyLoginUserPmd_C) GetCompress() string {
	if m != nil && m.Compress != nil {
		return *m.Compress
	}
	return ""
}

func (m *PushAccountVerifyLoginUserPmd_C) GetEncrypt() string {
	if m != nil && m.Encrypt != nil {
		return *m.Encrypt
	}
	return ""
}

func (m *PushAccountVerifyLoginUserPmd_C) GetEncryptkey() string {
	if m != nil && m.Encryptkey != nil {
		return *m.Encryptkey
	}
	return ""
}

// 登陆服务器返回给客户端的认证结果
type AccountTokenVerifyReturnLoginUserPmd_S struct {
	Retcode          *VerifyReturnReason `protobuf:"varint,1,req,name=retcode,enum=VerifyReturnReason" json:"retcode,omitempty"`
	Desc             *string             `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *AccountTokenVerifyReturnLoginUserPmd_S) Reset() {
	*m = AccountTokenVerifyReturnLoginUserPmd_S{}
}
func (m *AccountTokenVerifyReturnLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*AccountTokenVerifyReturnLoginUserPmd_S) ProtoMessage()    {}

func (m *AccountTokenVerifyReturnLoginUserPmd_S) GetRetcode() VerifyReturnReason {
	if m != nil && m.Retcode != nil {
		return *m.Retcode
	}
	return VerifyReturnReason_LoginOk
}

func (m *AccountTokenVerifyReturnLoginUserPmd_S) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

// 区服务器信息
type ZoneInfo struct {
	Zoneid           *uint32    `protobuf:"varint,1,req,name=zoneid" json:"zoneid,omitempty"`
	Zonename         *string    `protobuf:"bytes,2,req,name=zonename" json:"zonename,omitempty"`
	State            *ZoneState `protobuf:"varint,3,opt,name=state,enum=ZoneState" json:"state,omitempty"`
	Opentime         *string    `protobuf:"bytes,4,opt,name=opentime" json:"opentime,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ZoneInfo) Reset()         { *m = ZoneInfo{} }
func (m *ZoneInfo) String() string { return proto.CompactTextString(m) }
func (*ZoneInfo) ProtoMessage()    {}

func (m *ZoneInfo) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *ZoneInfo) GetZonename() string {
	if m != nil && m.Zonename != nil {
		return *m.Zonename
	}
	return ""
}

func (m *ZoneInfo) GetState() ZoneState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ZoneState_Shutdown
}

func (m *ZoneInfo) GetOpentime() string {
	if m != nil && m.Opentime != nil {
		return *m.Opentime
	}
	return ""
}

// 区服务器信息列表,选区列表
type ZoneInfoListLoginUserPmd_S struct {
	Gamename         *string     `protobuf:"bytes,1,opt,name=gamename" json:"gamename,omitempty"`
	Gameid           *uint32     `protobuf:"varint,2,req,name=gameid" json:"gameid,omitempty"`
	Zonelist         []*ZoneInfo `protobuf:"bytes,3,rep,name=zonelist" json:"zonelist,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ZoneInfoListLoginUserPmd_S) Reset()         { *m = ZoneInfoListLoginUserPmd_S{} }
func (m *ZoneInfoListLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ZoneInfoListLoginUserPmd_S) ProtoMessage()    {}

func (m *ZoneInfoListLoginUserPmd_S) GetGamename() string {
	if m != nil && m.Gamename != nil {
		return *m.Gamename
	}
	return ""
}

func (m *ZoneInfoListLoginUserPmd_S) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *ZoneInfoListLoginUserPmd_S) GetZonelist() []*ZoneInfo {
	if m != nil {
		return m.Zonelist
	}
	return nil
}

// 请求区服务器信息列表,选区列表
type RequestZoneInfoListLoginUserPmd_C struct {
	Gameid           *uint32 `protobuf:"varint,1,req,name=gameid" json:"gameid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestZoneInfoListLoginUserPmd_C) Reset()         { *m = RequestZoneInfoListLoginUserPmd_C{} }
func (m *RequestZoneInfoListLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*RequestZoneInfoListLoginUserPmd_C) ProtoMessage()    {}

func (m *RequestZoneInfoListLoginUserPmd_C) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

// 请求玩有在所有区的角色信息，及区在线信息
type RequestUserZoneInfoLoginUserPmd_C struct {
	Gameid           *uint32 `protobuf:"varint,1,req,name=gameid" json:"gameid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestUserZoneInfoLoginUserPmd_C) Reset()         { *m = RequestUserZoneInfoLoginUserPmd_C{} }
func (m *RequestUserZoneInfoLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*RequestUserZoneInfoLoginUserPmd_C) ProtoMessage()    {}

func (m *RequestUserZoneInfoLoginUserPmd_C) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

type UserZoneInfo struct {
	Charname         *string   `protobuf:"bytes,1,req,name=charname" json:"charname,omitempty"`
	Zoneinfo         *ZoneInfo `protobuf:"bytes,2,req,name=zoneinfo" json:"zoneinfo,omitempty"`
	Onlinenum        *uint32   `protobuf:"varint,3,req,name=onlinenum" json:"onlinenum,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *UserZoneInfo) Reset()         { *m = UserZoneInfo{} }
func (m *UserZoneInfo) String() string { return proto.CompactTextString(m) }
func (*UserZoneInfo) ProtoMessage()    {}

func (m *UserZoneInfo) GetCharname() string {
	if m != nil && m.Charname != nil {
		return *m.Charname
	}
	return ""
}

func (m *UserZoneInfo) GetZoneinfo() *ZoneInfo {
	if m != nil {
		return m.Zoneinfo
	}
	return nil
}

func (m *UserZoneInfo) GetOnlinenum() uint32 {
	if m != nil && m.Onlinenum != nil {
		return *m.Onlinenum
	}
	return 0
}

type RequestUserZoneInfoLoginUserPmd_S struct {
	Userzoneinfo     []*UserZoneInfo `protobuf:"bytes,1,rep,name=userzoneinfo" json:"userzoneinfo,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *RequestUserZoneInfoLoginUserPmd_S) Reset()         { *m = RequestUserZoneInfoLoginUserPmd_S{} }
func (m *RequestUserZoneInfoLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*RequestUserZoneInfoLoginUserPmd_S) ProtoMessage()    {}

func (m *RequestUserZoneInfoLoginUserPmd_S) GetUserzoneinfo() []*UserZoneInfo {
	if m != nil {
		return m.Userzoneinfo
	}
	return nil
}

// 请求登陆某个区,发给LoginServer
type UserLoginRequestLoginUserPmd_C struct {
	Gameid           *uint32 `protobuf:"varint,1,req,name=gameid" json:"gameid,omitempty"`
	Zoneid           *uint32 `protobuf:"varint,2,req,name=zoneid" json:"zoneid,omitempty"`
	Gameversion      *uint32 `protobuf:"varint,3,req,name=gameversion" json:"gameversion,omitempty"`
	Mid              *string `protobuf:"bytes,4,opt,name=mid" json:"mid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserLoginRequestLoginUserPmd_C) Reset()         { *m = UserLoginRequestLoginUserPmd_C{} }
func (m *UserLoginRequestLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*UserLoginRequestLoginUserPmd_C) ProtoMessage()    {}

func (m *UserLoginRequestLoginUserPmd_C) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *UserLoginRequestLoginUserPmd_C) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *UserLoginRequestLoginUserPmd_C) GetGameversion() uint32 {
	if m != nil && m.Gameversion != nil {
		return *m.Gameversion
	}
	return 0
}

func (m *UserLoginRequestLoginUserPmd_C) GetMid() string {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return ""
}

// 登陆某个区的错误返回,LoginServer返回
type UserLoginReturnFailLoginUserPmd_S struct {
	Retcode          *LoginReturnFailReason `protobuf:"varint,1,req,name=retcode,enum=LoginReturnFailReason" json:"retcode,omitempty"`
	Desc             *string                `protobuf:"bytes,2,req,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *UserLoginReturnFailLoginUserPmd_S) Reset()         { *m = UserLoginReturnFailLoginUserPmd_S{} }
func (m *UserLoginReturnFailLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*UserLoginReturnFailLoginUserPmd_S) ProtoMessage()    {}

func (m *UserLoginReturnFailLoginUserPmd_S) GetRetcode() LoginReturnFailReason {
	if m != nil && m.Retcode != nil {
		return *m.Retcode
	}
	return LoginReturnFailReason_Password
}

func (m *UserLoginReturnFailLoginUserPmd_S) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

// 登陆某个区正确时的返回,LoginServer返回
type UserLoginReturnOkLoginUserPmd_S struct {
	Accountid        *uint64 `protobuf:"varint,1,req,name=accountid" json:"accountid,omitempty"`
	Logintempid      *uint64 `protobuf:"varint,2,req,name=logintempid" json:"logintempid,omitempty"`
	Tokenid          *uint64 `protobuf:"varint,3,req,name=tokenid" json:"tokenid,omitempty"`
	Gatewayurl       *string `protobuf:"bytes,4,req,name=gatewayurl" json:"gatewayurl,omitempty"`
	Gameid           *uint32 `protobuf:"varint,5,req,name=gameid" json:"gameid,omitempty"`
	Zoneid           *uint32 `protobuf:"varint,6,req,name=zoneid" json:"zoneid,omitempty"`
	Separatezoneuid  *bool   `protobuf:"varint,7,opt,name=separatezoneuid" json:"separatezoneuid,omitempty"`
	Zoneuid          *string `protobuf:"bytes,8,opt,name=zoneuid" json:"zoneuid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserLoginReturnOkLoginUserPmd_S) Reset()         { *m = UserLoginReturnOkLoginUserPmd_S{} }
func (m *UserLoginReturnOkLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*UserLoginReturnOkLoginUserPmd_S) ProtoMessage()    {}

func (m *UserLoginReturnOkLoginUserPmd_S) GetAccountid() uint64 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetLogintempid() uint64 {
	if m != nil && m.Logintempid != nil {
		return *m.Logintempid
	}
	return 0
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetTokenid() uint64 {
	if m != nil && m.Tokenid != nil {
		return *m.Tokenid
	}
	return 0
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetGatewayurl() string {
	if m != nil && m.Gatewayurl != nil {
		return *m.Gatewayurl
	}
	return ""
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetSeparatezoneuid() bool {
	if m != nil && m.Separatezoneuid != nil {
		return *m.Separatezoneuid
	}
	return false
}

func (m *UserLoginReturnOkLoginUserPmd_S) GetZoneuid() string {
	if m != nil && m.Zoneuid != nil {
		return *m.Zoneuid
	}
	return ""
}

// 发给网关的登陆消息
type UserLoginTokenLoginUserPmd_C struct {
	Gameid           *uint32 `protobuf:"varint,1,req,name=gameid" json:"gameid,omitempty"`
	Zoneid           *uint32 `protobuf:"varint,2,req,name=zoneid" json:"zoneid,omitempty"`
	Accountid        *uint64 `protobuf:"varint,3,req,name=accountid" json:"accountid,omitempty"`
	Logintempid      *uint64 `protobuf:"varint,4,req,name=logintempid" json:"logintempid,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,5,req,name=timestamp" json:"timestamp,omitempty"`
	Tokenmd5         *string `protobuf:"bytes,6,req,name=tokenmd5" json:"tokenmd5,omitempty"`
	Compress         *string `protobuf:"bytes,8,opt,name=compress" json:"compress,omitempty"`
	Encrypt          *string `protobuf:"bytes,9,opt,name=encrypt" json:"encrypt,omitempty"`
	Encryptkey       *string `protobuf:"bytes,10,opt,name=encryptkey" json:"encryptkey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserLoginTokenLoginUserPmd_C) Reset()         { *m = UserLoginTokenLoginUserPmd_C{} }
func (m *UserLoginTokenLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*UserLoginTokenLoginUserPmd_C) ProtoMessage()    {}

func (m *UserLoginTokenLoginUserPmd_C) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *UserLoginTokenLoginUserPmd_C) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *UserLoginTokenLoginUserPmd_C) GetAccountid() uint64 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *UserLoginTokenLoginUserPmd_C) GetLogintempid() uint64 {
	if m != nil && m.Logintempid != nil {
		return *m.Logintempid
	}
	return 0
}

func (m *UserLoginTokenLoginUserPmd_C) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *UserLoginTokenLoginUserPmd_C) GetTokenmd5() string {
	if m != nil && m.Tokenmd5 != nil {
		return *m.Tokenmd5
	}
	return ""
}

func (m *UserLoginTokenLoginUserPmd_C) GetCompress() string {
	if m != nil && m.Compress != nil {
		return *m.Compress
	}
	return ""
}

func (m *UserLoginTokenLoginUserPmd_C) GetEncrypt() string {
	if m != nil && m.Encrypt != nil {
		return *m.Encrypt
	}
	return ""
}

func (m *UserLoginTokenLoginUserPmd_C) GetEncryptkey() string {
	if m != nil && m.Encryptkey != nil {
		return *m.Encryptkey
	}
	return ""
}

// 通知客户端发送日志的地址和日志级别
type ClientLogUrlLoginUserPmd_S struct {
	Loglevel         *string `protobuf:"bytes,1,req,name=loglevel" json:"loglevel,omitempty"`
	Logurl           *string `protobuf:"bytes,2,req,name=logurl" json:"logurl,omitempty"`
	Distinct         *bool   `protobuf:"varint,3,req,name=distinct" json:"distinct,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ClientLogUrlLoginUserPmd_S) Reset()         { *m = ClientLogUrlLoginUserPmd_S{} }
func (m *ClientLogUrlLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ClientLogUrlLoginUserPmd_S) ProtoMessage()    {}

func (m *ClientLogUrlLoginUserPmd_S) GetLoglevel() string {
	if m != nil && m.Loglevel != nil {
		return *m.Loglevel
	}
	return ""
}

func (m *ClientLogUrlLoginUserPmd_S) GetLogurl() string {
	if m != nil && m.Logurl != nil {
		return *m.Logurl
	}
	return ""
}

func (m *ClientLogUrlLoginUserPmd_S) GetDistinct() bool {
	if m != nil && m.Distinct != nil {
		return *m.Distinct
	}
	return false
}

type MessageBoxLoginUserPmd_S struct {
	Btnleft          *string `protobuf:"bytes,1,opt,name=btnleft" json:"btnleft,omitempty"`
	Btnmiddle        *string `protobuf:"bytes,2,opt,name=btnmiddle" json:"btnmiddle,omitempty"`
	Btnright         *string `protobuf:"bytes,3,opt,name=btnright" json:"btnright,omitempty"`
	Info             *string `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MessageBoxLoginUserPmd_S) Reset()         { *m = MessageBoxLoginUserPmd_S{} }
func (m *MessageBoxLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*MessageBoxLoginUserPmd_S) ProtoMessage()    {}

func (m *MessageBoxLoginUserPmd_S) GetBtnleft() string {
	if m != nil && m.Btnleft != nil {
		return *m.Btnleft
	}
	return ""
}

func (m *MessageBoxLoginUserPmd_S) GetBtnmiddle() string {
	if m != nil && m.Btnmiddle != nil {
		return *m.Btnmiddle
	}
	return ""
}

func (m *MessageBoxLoginUserPmd_S) GetBtnright() string {
	if m != nil && m.Btnright != nil {
		return *m.Btnright
	}
	return ""
}

func (m *MessageBoxLoginUserPmd_S) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

// 请求注册帐号
type RequestAccountRegisterLoginUserPmd_C struct {
	Account          *string `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	Password         *string `protobuf:"bytes,2,req,name=password" json:"password,omitempty"`
	Code             *string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestAccountRegisterLoginUserPmd_C) Reset()         { *m = RequestAccountRegisterLoginUserPmd_C{} }
func (m *RequestAccountRegisterLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*RequestAccountRegisterLoginUserPmd_C) ProtoMessage()    {}

func (m *RequestAccountRegisterLoginUserPmd_C) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *RequestAccountRegisterLoginUserPmd_C) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *RequestAccountRegisterLoginUserPmd_C) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

// 请求注册帐号
type ReturnAccountRegisterLoginUserPmd_S struct {
	Account          *string `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	Accountid        *uint64 `protobuf:"varint,2,req,name=accountid" json:"accountid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReturnAccountRegisterLoginUserPmd_S) Reset()         { *m = ReturnAccountRegisterLoginUserPmd_S{} }
func (m *ReturnAccountRegisterLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ReturnAccountRegisterLoginUserPmd_S) ProtoMessage()    {}

func (m *ReturnAccountRegisterLoginUserPmd_S) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *ReturnAccountRegisterLoginUserPmd_S) GetAccountid() uint64 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

// 发给网关的主动退出消息
type UserLogoutTokenLoginUserPmd_C struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *UserLogoutTokenLoginUserPmd_C) Reset()         { *m = UserLogoutTokenLoginUserPmd_C{} }
func (m *UserLogoutTokenLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*UserLogoutTokenLoginUserPmd_C) ProtoMessage()    {}

// 发给网关的断线重连消息
type UserLoginReconnectLoginUserPmd_C struct {
	Accountid        *uint64 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Tokenmd5         *string `protobuf:"bytes,3,opt,name=tokenmd5" json:"tokenmd5,omitempty"`
	Logintempid      *uint64 `protobuf:"varint,4,opt,name=logintempid" json:"logintempid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserLoginReconnectLoginUserPmd_C) Reset()         { *m = UserLoginReconnectLoginUserPmd_C{} }
func (m *UserLoginReconnectLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*UserLoginReconnectLoginUserPmd_C) ProtoMessage()    {}

func (m *UserLoginReconnectLoginUserPmd_C) GetAccountid() uint64 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *UserLoginReconnectLoginUserPmd_C) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *UserLoginReconnectLoginUserPmd_C) GetTokenmd5() string {
	if m != nil && m.Tokenmd5 != nil {
		return *m.Tokenmd5
	}
	return ""
}

func (m *UserLoginReconnectLoginUserPmd_C) GetLogintempid() uint64 {
	if m != nil && m.Logintempid != nil {
		return *m.Logintempid
	}
	return 0
}

// 如果是重连成功需要给老的客户度发送踢下线消息，否则会永远抢下去
type ReconnectKickoutLoginUserPmd_S struct {
	Desc             *string `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReconnectKickoutLoginUserPmd_S) Reset()         { *m = ReconnectKickoutLoginUserPmd_S{} }
func (m *ReconnectKickoutLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ReconnectKickoutLoginUserPmd_S) ProtoMessage()    {}

func (m *ReconnectKickoutLoginUserPmd_S) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

type ReconnectErrorLoginUserPmd_S struct {
	Desc             *string `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReconnectErrorLoginUserPmd_S) Reset()         { *m = ReconnectErrorLoginUserPmd_S{} }
func (m *ReconnectErrorLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ReconnectErrorLoginUserPmd_S) ProtoMessage()    {}

func (m *ReconnectErrorLoginUserPmd_S) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

// 服务器主动踢玩家下线
type ServerKickoutLoginUserPmd_S struct {
	Accountid        *uint64 `protobuf:"varint,1,req,name=accountid" json:"accountid,omitempty"`
	Desc             *string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServerKickoutLoginUserPmd_S) Reset()         { *m = ServerKickoutLoginUserPmd_S{} }
func (m *ServerKickoutLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ServerKickoutLoginUserPmd_S) ProtoMessage()    {}

func (m *ServerKickoutLoginUserPmd_S) GetAccountid() uint64 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *ServerKickoutLoginUserPmd_S) GetDesc() string {
	if m != nil && m.Desc != nil {
		return *m.Desc
	}
	return ""
}

// 平台用户信息
type PlatInfo struct {
	Account          *string   `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	Platid           *PlatType `protobuf:"varint,2,req,name=platid,enum=PlatType" json:"platid,omitempty"`
	Email            *string   `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Gender           *string   `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	Nickname         *string   `protobuf:"bytes,5,opt,name=nickname" json:"nickname,omitempty"`
	Timestamp        *string   `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign             *string   `protobuf:"bytes,8,opt,name=sign" json:"sign,omitempty"`
	Faceurl          *string   `protobuf:"bytes,10,opt,name=faceurl" json:"faceurl,omitempty"`
	Extdata          *string   `protobuf:"bytes,11,opt,name=extdata" json:"extdata,omitempty"`
	Uid              *string   `protobuf:"bytes,12,opt,name=uid" json:"uid,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PlatInfo) Reset()         { *m = PlatInfo{} }
func (m *PlatInfo) String() string { return proto.CompactTextString(m) }
func (*PlatInfo) ProtoMessage()    {}

func (m *PlatInfo) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *PlatInfo) GetPlatid() PlatType {
	if m != nil && m.Platid != nil {
		return *m.Platid
	}
	return PlatType_PlatType_Normal
}

func (m *PlatInfo) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *PlatInfo) GetGender() string {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return ""
}

func (m *PlatInfo) GetNickname() string {
	if m != nil && m.Nickname != nil {
		return *m.Nickname
	}
	return ""
}

func (m *PlatInfo) GetTimestamp() string {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return ""
}

func (m *PlatInfo) GetSign() string {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return ""
}

func (m *PlatInfo) GetFaceurl() string {
	if m != nil && m.Faceurl != nil {
		return *m.Faceurl
	}
	return ""
}

func (m *PlatInfo) GetExtdata() string {
	if m != nil && m.Extdata != nil {
		return *m.Extdata
	}
	return ""
}

func (m *PlatInfo) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

// 第三方平台登录
type ThirdPlatLoginUserPmd_C struct {
	Platinfo         *PlatInfo `protobuf:"bytes,1,req,name=platinfo" json:"platinfo,omitempty"`
	Gameid           *uint32   `protobuf:"varint,2,req,name=gameid" json:"gameid,omitempty"`
	Sid              *string   `protobuf:"bytes,3,req,name=sid" json:"sid,omitempty"`
	Uid              *string   `protobuf:"bytes,4,req,name=uid" json:"uid,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ThirdPlatLoginUserPmd_C) Reset()         { *m = ThirdPlatLoginUserPmd_C{} }
func (m *ThirdPlatLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*ThirdPlatLoginUserPmd_C) ProtoMessage()    {}

func (m *ThirdPlatLoginUserPmd_C) GetPlatinfo() *PlatInfo {
	if m != nil {
		return m.Platinfo
	}
	return nil
}

func (m *ThirdPlatLoginUserPmd_C) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *ThirdPlatLoginUserPmd_C) GetSid() string {
	if m != nil && m.Sid != nil {
		return *m.Sid
	}
	return ""
}

func (m *ThirdPlatLoginUserPmd_C) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

// 通知服务器所采用的编码方式和区域信息
type SetServerLangLoginUserPmd_C struct {
	Lang             *string `protobuf:"bytes,1,req,name=lang" json:"lang,omitempty"`
	Gameregion       *int32  `protobuf:"varint,2,req,name=gameregion" json:"gameregion,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SetServerLangLoginUserPmd_C) Reset()         { *m = SetServerLangLoginUserPmd_C{} }
func (m *SetServerLangLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*SetServerLangLoginUserPmd_C) ProtoMessage()    {}

func (m *SetServerLangLoginUserPmd_C) GetLang() string {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return ""
}

func (m *SetServerLangLoginUserPmd_C) GetGameregion() int32 {
	if m != nil && m.Gameregion != nil {
		return *m.Gameregion
	}
	return 0
}

// 客户端请求得到自己的IP
type RequestClientIPLoginUserPmd_C struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RequestClientIPLoginUserPmd_C) Reset()         { *m = RequestClientIPLoginUserPmd_C{} }
func (m *RequestClientIPLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*RequestClientIPLoginUserPmd_C) ProtoMessage()    {}

// 返回客户端IP
type ReturnClientIPLoginUserPmd_S struct {
	Pstrip           *string `protobuf:"bytes,1,req,name=pstrip" json:"pstrip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReturnClientIPLoginUserPmd_S) Reset()         { *m = ReturnClientIPLoginUserPmd_S{} }
func (m *ReturnClientIPLoginUserPmd_S) String() string { return proto.CompactTextString(m) }
func (*ReturnClientIPLoginUserPmd_S) ProtoMessage()    {}

func (m *ReturnClientIPLoginUserPmd_S) GetPstrip() string {
	if m != nil && m.Pstrip != nil {
		return *m.Pstrip
	}
	return ""
}

type CheckVersionLoginUserPmd_C struct {
	DefaultCharid    *uint32 `protobuf:"varint,1,opt,name=default_charid" json:"default_charid,omitempty"`
	Version          *uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckVersionLoginUserPmd_C) Reset()         { *m = CheckVersionLoginUserPmd_C{} }
func (m *CheckVersionLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*CheckVersionLoginUserPmd_C) ProtoMessage()    {}

func (m *CheckVersionLoginUserPmd_C) GetDefaultCharid() uint32 {
	if m != nil && m.DefaultCharid != nil {
		return *m.DefaultCharid
	}
	return 0
}

func (m *CheckVersionLoginUserPmd_C) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type BehaviorClientVerifyLoginUserPmd_C struct {
	Account          *string `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	Token            *string `protobuf:"bytes,2,req,name=token" json:"token,omitempty"`
	Version          *uint32 `protobuf:"varint,3,req,name=version" json:"version,omitempty"`
	Gameid           *uint32 `protobuf:"varint,4,opt,name=gameid" json:"gameid,omitempty"`
	Mid              *string `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
	Platid           *uint32 `protobuf:"varint,6,opt,name=platid" json:"platid,omitempty"`
	Zoneid           *uint32 `protobuf:"varint,7,opt,name=zoneid" json:"zoneid,omitempty"`
	Gameversion      *uint32 `protobuf:"varint,8,opt,name=gameversion" json:"gameversion,omitempty"`
	Compress         *string `protobuf:"bytes,9,opt,name=compress" json:"compress,omitempty"`
	Encrypt          *string `protobuf:"bytes,10,opt,name=encrypt" json:"encrypt,omitempty"`
	Encryptkey       *string `protobuf:"bytes,11,opt,name=encryptkey" json:"encryptkey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BehaviorClientVerifyLoginUserPmd_C) Reset()         { *m = BehaviorClientVerifyLoginUserPmd_C{} }
func (m *BehaviorClientVerifyLoginUserPmd_C) String() string { return proto.CompactTextString(m) }
func (*BehaviorClientVerifyLoginUserPmd_C) ProtoMessage()    {}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetGameid() uint32 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetMid() string {
	if m != nil && m.Mid != nil {
		return *m.Mid
	}
	return ""
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetPlatid() uint32 {
	if m != nil && m.Platid != nil {
		return *m.Platid
	}
	return 0
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetZoneid() uint32 {
	if m != nil && m.Zoneid != nil {
		return *m.Zoneid
	}
	return 0
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetGameversion() uint32 {
	if m != nil && m.Gameversion != nil {
		return *m.Gameversion
	}
	return 0
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetCompress() string {
	if m != nil && m.Compress != nil {
		return *m.Compress
	}
	return ""
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetEncrypt() string {
	if m != nil && m.Encrypt != nil {
		return *m.Encrypt
	}
	return ""
}

func (m *BehaviorClientVerifyLoginUserPmd_C) GetEncryptkey() string {
	if m != nil && m.Encryptkey != nil {
		return *m.Encryptkey
	}
	return ""
}

func init() {
	proto.RegisterEnum("VerifyReturnReason", VerifyReturnReason_name, VerifyReturnReason_value)
	proto.RegisterEnum("ZoneState", ZoneState_name, ZoneState_value)
	proto.RegisterEnum("LoginReturnFailReason", LoginReturnFailReason_name, LoginReturnFailReason_value)
	proto.RegisterEnum("PlatType", PlatType_name, PlatType_value)
	proto.RegisterEnum("Login_Param", Login_Param_name, Login_Param_value)
}

const (
	ffj_t_AccountTokenVerifyLoginUserPmd_CSbase = iota
	ffj_t_AccountTokenVerifyLoginUserPmd_CSno_such_key

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Account

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Token

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Version

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameid

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Mid

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Platid

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Zoneid

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameversion

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Compress

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encrypt

	ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encryptkey
)

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Account = []byte("account")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Token = []byte("token")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Version = []byte("version")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Gameid = []byte("gameid")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Mid = []byte("mid")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Platid = []byte("platid")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Zoneid = []byte("zoneid")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Gameversion = []byte("gameversion")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Compress = []byte("compress")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Encrypt = []byte("encrypt")

var ffj_key_AccountTokenVerifyLoginUserPmd_CS_Encryptkey = []byte("encryptkey")

func (uj *AccountTokenVerifyLoginUserPmd_CS) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *AccountTokenVerifyLoginUserPmd_CS) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_AccountTokenVerifyLoginUserPmd_CSbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CSno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Account, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Account
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Compress, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Compress
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Encrypt, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encrypt
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Encryptkey, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encryptkey
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'g':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Gameid, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameid
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Gameversion, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameversion
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Mid, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Mid
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Platid, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Platid
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Token, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Token
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Version, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Version
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'z':

					if bytes.Equal(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Zoneid, kn) {
						currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Zoneid
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Encryptkey, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encryptkey
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Encrypt, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encrypt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Compress, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Compress
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Gameversion, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameversion
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Zoneid, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Zoneid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Platid, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Platid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Mid, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Mid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Gameid, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameid
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Version, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Version
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Token, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Token
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AccountTokenVerifyLoginUserPmd_CS_Account, kn) {
					currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CS_Account
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_AccountTokenVerifyLoginUserPmd_CSno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Account:
					goto handle_Account

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Token:
					goto handle_Token

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Version:
					goto handle_Version

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameid:
					goto handle_Gameid

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Mid:
					goto handle_Mid

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Platid:
					goto handle_Platid

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Zoneid:
					goto handle_Zoneid

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Gameversion:
					goto handle_Gameversion

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Compress:
					goto handle_Compress

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encrypt:
					goto handle_Encrypt

				case ffj_t_AccountTokenVerifyLoginUserPmd_CS_Encryptkey:
					goto handle_Encryptkey

				case ffj_t_AccountTokenVerifyLoginUserPmd_CSno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Account:

	/* handler: uj.Account type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Account = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Account = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Token:

	/* handler: uj.Token type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Token = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Token = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Version:

	/* handler: uj.Version type=uint32 kind=uint32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Version = nil

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := uint32(tval)
			uj.Version = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Gameid:

	/* handler: uj.Gameid type=uint32 kind=uint32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Gameid = nil

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := uint32(tval)
			uj.Gameid = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Mid:

	/* handler: uj.Mid type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Mid = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Mid = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Platid:

	/* handler: uj.Platid type=uint32 kind=uint32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Platid = nil

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := uint32(tval)
			uj.Platid = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Zoneid:

	/* handler: uj.Zoneid type=uint32 kind=uint32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Zoneid = nil

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := uint32(tval)
			uj.Zoneid = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Gameversion:

	/* handler: uj.Gameversion type=uint32 kind=uint32 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Gameversion = nil

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := uint32(tval)
			uj.Gameversion = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Compress:

	/* handler: uj.Compress type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Compress = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Compress = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Encrypt:

	/* handler: uj.Encrypt type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Encrypt = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Encrypt = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Encryptkey:

	/* handler: uj.Encryptkey type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Encryptkey = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Encryptkey = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *AccountTokenVerifyLoginUserPmd_CS) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *AccountTokenVerifyLoginUserPmd_CS) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Account != nil {
		if true {
			buf.WriteString(`"account":`)
			fflib.WriteJsonString(buf, string(*mj.Account))
			buf.WriteByte(',')
		}
	}
	if mj.Token != nil {
		if true {
			buf.WriteString(`"token":`)
			fflib.WriteJsonString(buf, string(*mj.Token))
			buf.WriteByte(',')
		}
	}
	if mj.Version != nil {
		if true {
			buf.WriteString(`"version":`)
			fflib.FormatBits2(buf, uint64(*mj.Version), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.Gameid != nil {
		if true {
			buf.WriteString(`"gameid":`)
			fflib.FormatBits2(buf, uint64(*mj.Gameid), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.Mid != nil {
		if true {
			buf.WriteString(`"mid":`)
			fflib.WriteJsonString(buf, string(*mj.Mid))
			buf.WriteByte(',')
		}
	}
	if mj.Platid != nil {
		if true {
			buf.WriteString(`"platid":`)
			fflib.FormatBits2(buf, uint64(*mj.Platid), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.Zoneid != nil {
		if true {
			buf.WriteString(`"zoneid":`)
			fflib.FormatBits2(buf, uint64(*mj.Zoneid), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.Gameversion != nil {
		if true {
			buf.WriteString(`"gameversion":`)
			fflib.FormatBits2(buf, uint64(*mj.Gameversion), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.Compress != nil {
		if true {
			buf.WriteString(`"compress":`)
			fflib.WriteJsonString(buf, string(*mj.Compress))
			buf.WriteByte(',')
		}
	}
	if mj.Encrypt != nil {
		if true {
			buf.WriteString(`"encrypt":`)
			fflib.WriteJsonString(buf, string(*mj.Encrypt))
			buf.WriteByte(',')
		}
	}
	if mj.Encryptkey != nil {
		if true {
			buf.WriteString(`"encryptkey":`)
			fflib.WriteJsonString(buf, string(*mj.Encryptkey))
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

var Login_Param_instance = map[string]interface{}{
	"AccountTokenVerifyLoginUserPmd_CS":      AccountTokenVerifyLoginUserPmd_CS{},
	"AccountTokenVerifyReturnLoginUserPmd_S": AccountTokenVerifyReturnLoginUserPmd_S{},
	"ZoneInfoListLoginUserPmd_S":             ZoneInfoListLoginUserPmd_S{},
	"UserLoginRequestLoginUserPmd_C":         UserLoginRequestLoginUserPmd_C{},
	"UserLoginReturnFailLoginUserPmd_S":      UserLoginReturnFailLoginUserPmd_S{},
	"UserLoginReturnOkLoginUserPmd_S":        UserLoginReturnOkLoginUserPmd_S{},
	"UserLoginTokenLoginUserPmd_C":           UserLoginTokenLoginUserPmd_C{},
	"ClientLogUrlLoginUserPmd_S":             ClientLogUrlLoginUserPmd_S{},
	"MessageBoxLoginUserPmd_S":               MessageBoxLoginUserPmd_S{},
	"RequestAccountRegisterLoginUserPmd_C":   RequestAccountRegisterLoginUserPmd_C{},
	"ReturnAccountRegisterLoginUserPmd_S":    ReturnAccountRegisterLoginUserPmd_S{},
	"UserLogoutTokenLoginUserPmd_C":          UserLogoutTokenLoginUserPmd_C{},
	"UserLoginReconnectLoginUserPmd_C":       UserLoginReconnectLoginUserPmd_C{},
	"ReconnectKickoutLoginUserPmd_S":         ReconnectKickoutLoginUserPmd_S{},
	"ServerKickoutLoginUserPmd_S":            ServerKickoutLoginUserPmd_S{},
	"RequestZoneInfoListLoginUserPmd_C":      RequestZoneInfoListLoginUserPmd_C{},
	"SetServerLangLoginUserPmd_C":            SetServerLangLoginUserPmd_C{},
	"RequestClientIPLoginUserPmd_C":          RequestClientIPLoginUserPmd_C{},
	"ReturnClientIPLoginUserPmd_S":           ReturnClientIPLoginUserPmd_S{},
	"ReconnectErrorLoginUserPmd_S":           ReconnectErrorLoginUserPmd_S{},
	"CheckVersionLoginUserPmd_C":             CheckVersionLoginUserPmd_C{},
	"PushAccountVerifyLoginUserPmd_C":        PushAccountVerifyLoginUserPmd_C{},
	"BehaviorClientVerifyLoginUserPmd_C":     BehaviorClientVerifyLoginUserPmd_C{},
	"RequestUserZoneInfoLoginUserPmd_C":      RequestUserZoneInfoLoginUserPmd_C{},
	"RequestUserZoneInfoLoginUserPmd_S":      RequestUserZoneInfoLoginUserPmd_S{},
}
